A destructor function is called automatically when the object goes out of scope or is deleted.
Destructor release memory space occupied by the objects created by the constructor.
When a class contains a pointer to memory allocated in the class, we should write a destructor to release memory before the class instance is destroyed. This must be done to avoid memory leaks.
Only one destructor in a class
In destructor, objects are destroyed in the reverse of an object creation.

-------virtual destructor-------------
Deleting a derived class object using a pointer of base class type that has a non-virtual destructor results in undefined behavior (Only call destructor of base class, not call destructor of derived class)
  --> Making base class destructor virtual guarantees that the object of derived class is destructed properly.\

--------private destructor------------
Whenever we want to control the destruction of objects of a class, we make the destructor private.
  --> need to use friend function or class instance method to delete this object.
private:
  ~parent() { cout << "destructor called" << endl; }
public:
void destruct() { delete this; }
